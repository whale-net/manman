name: OpenAPI

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - 'main'

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  actions: write
  issues: write
  pull-requests: write


jobs:
  generate-openapi:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write  # Required for release attachment
      actions: write   # Required for artifact upload
      issues: write    # Required for PR comments

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Install UV and project dependencies
        run: |
          echo "üì¶ Installing UV package manager..."
          python -m pip install --upgrade pip
          pip install uv
          echo "üì¶ Installing project dependencies with UV..."
          uv sync --dev

      - name: Create OpenAPI specs directory
        run: mkdir -p openapi-specs

      - name: Generate OpenAPI spec for Experience API
        run: |
          echo "üîÑ Generating Experience API specification..."
          uv run openapi experience-api
          echo "‚úÖ Experience API specification generated"

      - name: Generate OpenAPI spec for Status API
        run: |
          echo "üîÑ Generating Status API specification..."
          uv run openapi status-api
          echo "‚úÖ Status API specification generated"

      - name: Generate OpenAPI spec for Worker DAL API
        run: |
          echo "üîÑ Generating Worker DAL API specification..."
          uv run openapi worker-dal-api
          echo "‚úÖ Worker DAL API specification generated"

      - name: List generated files
        run: |
          echo "Generated OpenAPI specifications:"
          ls -la openapi-specs/
          echo
          echo "File contents preview:"
          for file in openapi-specs/*.json; do
            echo "=== $file ==="
            jq '.info.title, .info.version' "$file" 2>/dev/null || echo "Failed to parse JSON"
            echo
          done

      - name: Create OpenAPI bundle
        run: |
          # Create a combined archive with all OpenAPI specs
          tar -czf openapi-specs-bundle.tar.gz openapi-specs/

          # Also create individual archives for each API
          cd openapi-specs
          for api_file in *.json; do
            api_name=$(basename "$api_file" .json)
            tar -czf "../openapi-${api_name}.tar.gz" "$api_file"
          done
          cd ..

      - name: Upload OpenAPI artifacts (for all events)
        uses: actions/upload-artifact@v4
        with:
          name: openapi-specifications
          path: |
            openapi-specs/
            openapi-*.tar.gz
          retention-days: 30

      # Only attach to release if this is a tag push
      - name: Attach OpenAPI specs to release
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üöÄ Uploading OpenAPI specifications to release ${{ github.ref_name }}"

          # Check if release exists, exit if it doesn't
          if ! gh release view "${{ github.ref_name }}" > /dev/null 2>&1; then
            echo "‚ùå Release ${{ github.ref_name }} does not exist. Exiting."
            echo "This action should only run when triggered by an existing release."
            exit 1
          fi

          # Upload all files
          echo "üì¶ Uploading bundle..."
          gh release upload "${{ github.ref_name }}" openapi-specs-bundle.tar.gz --clobber

          echo "üì¶ Uploading individual API archives..."
          for file in openapi-*.tar.gz; do
            if [ -f "$file" ]; then
              echo "  Uploading $file..."
              gh release upload "${{ github.ref_name }}" "$file" --clobber
            fi
          done

          # disabled json, archives have it
          # echo "üì¶ Uploading JSON specifications..."
          # for file in openapi-specs/*.json; do
          #   if [ -f "$file" ]; then
          #     echo "  Uploading $file..."
          #     gh release upload "${{ github.ref_name }}" "$file" --clobber
          #   fi
          # done

          echo "‚úÖ All OpenAPI specifications uploaded to release"

  # Additional job to validate the generated OpenAPI specs
  validate-openapi:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: generate-openapi
    if: always() && needs.generate-openapi.result == 'success'

    steps:
      - name: Download OpenAPI artifacts
        uses: actions/download-artifact@v4
        with:
          name: openapi-specifications

      - name: Install OpenAPI validation tools
        run: |
          echo "üì¶ Installing validation tools..."

          # Retry npm installs in case of network issues
          for attempt in 1 2 3; do
            echo "Attempt $attempt/3 for npm package installation..."

            if npm install -g @redocly/openapi-cli; then
              echo "‚úÖ Validation tools installed successfully"
              break
            else
              if [ $attempt -eq 3 ]; then
                echo "‚ùå Failed to install validation tools after 3 attempts"
                exit 1
              fi
              echo "‚ö†Ô∏è Installation failed, retrying in 5 seconds..."
              sleep 5
            fi
          done

      - name: Validate OpenAPI specifications
        run: |
          echo "üîç Validating OpenAPI specifications..."

          for spec_file in openapi-specs/*.json; do
            echo "Validating $spec_file..."

            # Basic JSON validation
            if ! jq empty "$spec_file" 2>/dev/null; then
              echo "‚ùå Invalid JSON format in $spec_file"
              exit 1
            fi

            # Validate with Redocly CLI
            echo "  üìã Redocly validation:"
            if npx @redocly/openapi-cli validate "$spec_file"; then
              echo "  ‚úÖ Redocly validation passed"
            else
              echo "  ‚ö†Ô∏è Redocly validation failed for $spec_file"
            fi

            echo "  ‚úÖ Validation completed for $spec_file"
            echo
          done

          echo "üéâ All OpenAPI specifications have been validated!"

      - name: Generate documentation preview
        run: |
          echo "üìö Generating documentation previews..."

          # Install redoc-cli for documentation generation with retry logic
          for attempt in 1 2 3; do
            echo "Installing redoc-cli (attempt $attempt/3)..."
            if npm install -g redoc-cli; then
              echo "‚úÖ redoc-cli installed successfully"
              break
            else
              if [ $attempt -eq 3 ]; then
                echo "‚ùå Failed to install redoc-cli after 3 attempts"
                exit 1
              fi
              echo "‚ö†Ô∏è Installation failed, retrying in 5 seconds..."
              sleep 5
            fi
          done

          mkdir -p docs-preview

          for spec_file in openapi-specs/*.json; do
            api_name=$(basename "$spec_file" .json)
            echo "üîÑ Generating docs for $api_name..."

            # Use redoc-cli despite deprecation warning since it works reliably
            if redoc-cli build "$spec_file" --output "docs-preview/${api_name}.html"; then
              echo "‚úÖ Documentation generated for $api_name"
            else
              echo "‚ùå Failed to generate documentation for $api_name"
              exit 1
            fi
          done

          echo "üìÅ Generated documentation files:"
          ls -la docs-preview/

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openapi-documentation
          path: docs-preview/
          retention-days: 30

  # Deploy PR documentation preview with GitHub Pages
  deploy-pr-preview:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: validate-openapi
    if: github.event_name == 'pull_request' && needs.validate-openapi.result == 'success'
    permissions:
      contents: read
      pull-requests: write
      deployments: write
      pages: write
      id-token: write

    # Use PR-specific concurrency to allow multiple PRs but prevent conflicts within same PR
    concurrency:
      group: "openapi-pr-${{ github.event.pull_request.number }}"
      cancel-in-progress: true

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download current GitHub Pages site (if exists)
        run: |
          echo "üì• Downloading current GitHub Pages site (if it exists)..."

          # Create directory for site
          mkdir -p site

          # Try to download the current site (will fail silently if not exists)
          gh_pages_url="${{ vars.GH_PAGES_URL || format('https://{0}.github.io/{1}', github.repository_owner, github.event.repository.name) }}"

          echo "Attempting to download from: $gh_pages_url"

          if curl -sSL --head "$gh_pages_url" | grep -q "HTTP/2 200"; then
            echo "GitHub Pages site exists, downloading..."
            curl -sSL "$gh_pages_url/index.html" -o site/index.html || echo "Failed to download index.html, will create new one"

            # If main docs exist, try to download them too
            if curl -sSL --head "$gh_pages_url/main/" | grep -q "HTTP/2 200"; then
              echo "Main docs exist, preserving them..."
              mkdir -p site/main
              curl -sSL "$gh_pages_url/main/index.html" -o site/main/index.html || true
              curl -sSL "$gh_pages_url/main/experience-api.html" -o site/main/experience-api.html || true
              curl -sSL "$gh_pages_url/main/status-api.html" -o site/main/status-api.html || true
              curl -sSL "$gh_pages_url/main/worker-dal-api.html" -o site/main/worker-dal-api.html || true
            fi

            # Discover and preserve existing PR preview directories
            echo "Discovering existing PR preview directories..."
            if [ -f "site/index.html" ]; then
              # Extract PR directory names from the index.html (look for pr-NUMBER patterns)
              pr_dirs=$(grep -o 'href="pr-[0-9]*/' site/index.html | sed 's/href="//g' | sed 's/\/$//g' | sort -u)

              for pr_dir in $pr_dirs; do
                pr_number=$(echo "$pr_dir" | sed 's/pr-//g')

                # Skip the current PR to avoid conflicts
                if [ "$pr_number" != "${{ github.event.pull_request.number }}" ]; then
                  echo "Preserving existing PR preview: $pr_dir"

                  if curl -sSL --head "$gh_pages_url/$pr_dir/" | grep -q "HTTP/2 200"; then
                    mkdir -p "site/$pr_dir"
                    curl -sSL "$gh_pages_url/$pr_dir/index.html" -o "site/$pr_dir/index.html" || true
                    curl -sSL "$gh_pages_url/$pr_dir/experience-api.html" -o "site/$pr_dir/experience-api.html" || true
                    curl -sSL "$gh_pages_url/$pr_dir/status-api.html" -o "site/$pr_dir/status-api.html" || true
                    curl -sSL "$gh_pages_url/$pr_dir/worker-dal-api.html" -o "site/$pr_dir/worker-dal-api.html" || true
                    echo "‚úÖ Preserved $pr_dir"
                  else
                    echo "‚ö†Ô∏è PR directory $pr_dir exists in index but not accessible, skipping"
                  fi
                else
                  echo "Skipping current PR directory: $pr_dir (will be recreated)"
                fi
              done
            else
              echo "No existing index.html found, will create new site structure"
            fi
          else
            echo "No existing GitHub Pages site found, creating new one"
          fi

      - name: Download OpenAPI documentation artifacts
        uses: actions/download-artifact@v4
        with:
          name: openapi-documentation
          path: docs-preview

      - name: Create PR preview directory structure
        run: |
          # Create PR-specific directory
          mkdir -p site/pr-${{ github.event.pull_request.number }}

          # Copy documentation to PR-specific directory
          cp -r docs-preview/* site/pr-${{ github.event.pull_request.number }}/

          echo "üìÅ Created PR preview at site/pr-${{ github.event.pull_request.number }}/"
          ls -la site/pr-${{ github.event.pull_request.number }}/

      - name: Create PR-specific index page
        run: |
          node scripts/generate-docs-html.js pr-index \
            "site/pr-${{ github.event.pull_request.number }}/index.html" \
            "${{ github.event.pull_request.number }}" \
            "${{ github.event.pull_request.title }}" \
            "${{ github.head_ref }}" \
            "${{ github.sha }}"

      - name: Update main index with PR links
        run: |
          node scripts/generate-docs-html.js dynamic-pr-hub \
            site/index.html \
            site \
            "${{ github.event.pull_request.number }}" \
            "${{ github.event.pull_request.title }}"

      - name: Upload artifact for backup
        uses: actions/upload-artifact@v4
        with:
          name: pr-${{ github.event.pull_request.number }}-preview-site
          path: site/
          retention-days: 30

      - name: Setup Pages for deployment
        uses: actions/configure-pages@v4

      - name: Upload site to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Comment on PR with preview link
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request.number;
            const pageUrl = '${{ steps.deployment.outputs.page_url }}';
            const prPreviewUrl = `${pageUrl}pr-${pull_number}/`;

            const body = `## üìö API Documentation Preview

            The OpenAPI documentation preview has been deployed for this PR.

            **üîç PR Documentation:** [View Documentation](${prPreviewUrl})

            ### Available APIs in this preview:
            - [Experience API](${prPreviewUrl}experience-api.html) - Game server management and user-facing functionality
            - [Status API](${prPreviewUrl}status-api.html) - Status and monitoring functionality
            - [Worker DAL API](${prPreviewUrl}worker-dal-api.html) - Data access endpoints for worker services

            **Environment:** \`github-pages\`

            *This preview is automatically updated with each commit to this PR and will be available as long as the PR is open.*

            <!-- openapi-preview-comment:${pull_number} -->`;

            try {
              // Find existing comment using a more robust method
              const comments = await github.rest.issues.listComments({
                owner,
                repo,
                issue_number: pull_number,
              });

              // Look for comment with our unique marker
              const existingComment = comments.data.find(comment =>
                comment.body && comment.body.includes(`<!-- openapi-preview-comment:${pull_number} -->`)
              );

              if (existingComment) {
                console.log(`Updating existing comment ${existingComment.id}`);
                await github.rest.issues.updateComment({
                  owner,
                  repo,
                  comment_id: existingComment.id,
                  body,
                });
                console.log('Comment updated successfully');
              } else {
                console.log('Creating new comment');
                const newComment = await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: pull_number,
                  body,
                });
                console.log(`New comment created with ID: ${newComment.data.id}`);
              }
            } catch (error) {
              console.error('Error managing PR comment:', error);
              // Don't fail the workflow if comment fails
              core.warning(`Failed to update PR comment: ${error.message}`);
            }

  # Deploy main documentation (only for main branch pushes)
  deploy-main-docs:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: validate-openapi
    if: github.ref == 'refs/heads/main' && needs.validate-openapi.result == 'success'
    permissions:
      contents: read
      pages: write
      id-token: write

    concurrency:
      group: "openapi-main-deployment"
      cancel-in-progress: true

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download OpenAPI documentation artifacts
        uses: actions/download-artifact@v4
        with:
          name: openapi-documentation
          path: docs-preview

      - name: Setup site structure and clean up closed PR previews
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const { execSync } = require('child_process');

            // Create basic site structure for main branch updates
            fs.mkdirSync('site/main', { recursive: true });
            execSync('cp -r docs-preview/* site/main/');

            console.log('‚úÖ Updated main documentation from main branch');

            // ISSUE #73: Clean up closed PR previews when deploying from main branch
            // This ensures that PR previews are removed not only when PRs are closed
            // but also during subsequent deployments from main
            try {
              // List all directories in the site folder
              const siteDirs = fs.readdirSync('site');

              // Find PR preview directories (format: pr-NUMBER)
              const prDirs = siteDirs.filter(dir => dir.startsWith('pr-'));

              if (prDirs.length > 0) {
                console.log(`Found ${prDirs.length} PR preview directories to check`);

                for (const prDir of prDirs) {
                  // Extract PR number from directory name (pr-123 -> 123)
                  const prNumber = parseInt(prDir.replace('pr-', ''), 10);

                  if (isNaN(prNumber)) {
                    console.log(`Invalid PR directory format: ${prDir}, skipping`);
                    continue;
                  }

                  console.log(`Checking status of PR #${prNumber}`);

                  try {
                    // Check if PR is still open using GitHub API
                    const { data: pr } = await github.rest.pulls.get({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      pull_number: prNumber
                    });

                    if (pr.state === 'open') {
                      console.log(`PR #${prNumber} is still open, keeping preview directory`);
                    } else {
                      console.log(`PR #${prNumber} is ${pr.state}, removing preview directory`);
                      // Remove the PR preview directory
                      execSync(`rm -rf site/${prDir}`);
                      console.log(`Removed ${prDir} directory`);
                    }
                  } catch (error) {
                    // PR might not exist anymore
                    if (error.status === 404) {
                      console.log(`PR #${prNumber} not found, removing preview directory`);
                      execSync(`rm -rf site/${prDir}`);
                      console.log(`Removed ${prDir} directory`);
                    } else {
                      console.log(`Error checking PR #${prNumber}: ${error.message}`);
                    }
                  }
                }
              } else {
                console.log('No PR preview directories found to clean up');
              }
            } catch (error) {
              console.log(`Error during PR preview cleanup: ${error.message}`);
              // Don't fail the workflow if cleanup encounters an issue
            }

      - name: Create main documentation index
        run: |
          node scripts/generate-docs-html.js main-index site/main/index.html

      - name: Create comprehensive hub index
        run: |
          node scripts/generate-docs-html.js static-main-hub site/index.html

      - name: Create site archive
        run: |
          cd site
          tar -czf ../site.tar.gz .
          cd ..

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Log main deployment results
        run: |
          echo "üöÄ Main documentation deployment completed!"
          echo "Deployment URL: ${{ steps.deployment.outputs.page_url }}"
          echo "Main docs URL: ${{ steps.deployment.outputs.page_url }}main/"
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"

  # Deploy release documentation (only for release tags)
  deploy-release-docs:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: validate-openapi
    if: startsWith(github.ref, 'refs/tags/v') && needs.validate-openapi.result == 'success'
    permissions:
      contents: read
      pages: write
      id-token: write

    concurrency:
      group: "openapi-release-deployment"
      cancel-in-progress: true

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download current GitHub Pages site (if exists)
        run: |
          gh_pages_url="${{ vars.GH_PAGES_URL || format('https://{0}.github.io/{1}', github.repository_owner, github.event.repository.name) }}"
          node scripts/download-preserve-site.js release site "$gh_pages_url"

      - name: Download OpenAPI documentation artifacts
        uses: actions/download-artifact@v4
        with:
          name: openapi-documentation
          path: docs-preview

      - name: Create versioned documentation for release
        run: |
          version="${{ github.ref_name }}"
          echo "üì¶ Creating versioned documentation for release: $version"

          # Create version directory
          mkdir -p "site/versions/$version"

          # Copy documentation to version directory
          cp -r docs-preview/* "site/versions/$version/"

          echo "‚úÖ Created version documentation at site/versions/$version/"
          ls -la "site/versions/$version/"

      - name: Create release-specific index page
        run: |
          version="${{ github.ref_name }}"
          node scripts/generate-docs-html.js release-index \
            "site/versions/$version/index.html" \
            "$version" \
            "${{ github.sha }}"

      - name: Update main index with version history
        run: |
          node scripts/generate-docs-html.js dynamic-release-hub \
            site/index.html \
            site

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Log release deployment results
        run: |
          echo "üöÄ Release documentation deployment completed!"
          echo "Deployment URL: ${{ steps.deployment.outputs.page_url }}"
          echo "Release docs URL: ${{ steps.deployment.outputs.page_url }}versions/${{ github.ref_name }}/"
          echo "Version: ${{ github.ref_name }}"
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
