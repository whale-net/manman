name: OpenAPI

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - 'main'

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  actions: write
  issues: write
  pull-requests: write


jobs:
  generate-openapi:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write  # Required for release attachment
      actions: write   # Required for artifact upload
      issues: write    # Required for PR comments

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Install UV and project dependencies
        run: |
          echo "üì¶ Installing UV package manager..."
          python -m pip install --upgrade pip
          pip install uv
          echo "üì¶ Installing project dependencies with UV..."
          uv sync --dev

      - name: Create OpenAPI specs directory
        run: mkdir -p openapi-specs

      - name: Generate OpenAPI spec for Experience API
        run: |
          echo "üîÑ Generating Experience API specification..."
          uv run openapi experience-api
          echo "‚úÖ Experience API specification generated"

      - name: Generate OpenAPI spec for Status API
        run: |
          echo "üîÑ Generating Status API specification..."
          uv run openapi status-api
          echo "‚úÖ Status API specification generated"

      - name: Generate OpenAPI spec for Worker DAL API
        run: |
          echo "üîÑ Generating Worker DAL API specification..."
          uv run openapi worker-dal-api
          echo "‚úÖ Worker DAL API specification generated"

      - name: List generated files
        run: |
          echo "Generated OpenAPI specifications:"
          ls -la openapi-specs/
          echo
          echo "File contents preview:"
          for file in openapi-specs/*.json; do
            echo "=== $file ==="
            jq '.info.title, .info.version' "$file" 2>/dev/null || echo "Failed to parse JSON"
            echo
          done

      - name: Create OpenAPI bundle
        run: |
          # Create a combined archive with all OpenAPI specs
          tar -czf openapi-specs-bundle.tar.gz openapi-specs/

          # Also create individual archives for each API
          cd openapi-specs
          for api_file in *.json; do
            api_name=$(basename "$api_file" .json)
            tar -czf "../openapi-${api_name}.tar.gz" "$api_file"
          done
          cd ..

      - name: Upload OpenAPI artifacts (for all events)
        uses: actions/upload-artifact@v4
        with:
          name: openapi-specifications
          path: |
            openapi-specs/
            openapi-*.tar.gz
          retention-days: 30

      # Only attach to release if this is a tag push
      - name: Attach OpenAPI specs to release
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üöÄ Uploading OpenAPI specifications to release ${{ github.ref_name }}"

          # Check if release exists, exit if it doesn't
          if ! gh release view "${{ github.ref_name }}" > /dev/null 2>&1; then
            echo "‚ùå Release ${{ github.ref_name }} does not exist. Exiting."
            echo "This action should only run when triggered by an existing release."
            exit 1
          fi

          # Upload all files
          echo "üì¶ Uploading bundle..."
          gh release upload "${{ github.ref_name }}" openapi-specs-bundle.tar.gz --clobber

          echo "üì¶ Uploading individual API archives..."
          for file in openapi-*.tar.gz; do
            if [ -f "$file" ]; then
              echo "  Uploading $file..."
              gh release upload "${{ github.ref_name }}" "$file" --clobber
            fi
          done

          echo "üì¶ Uploading JSON specifications..."
          for file in openapi-specs/*.json; do
            if [ -f "$file" ]; then
              echo "  Uploading $file..."
              gh release upload "${{ github.ref_name }}" "$file" --clobber
            fi
          done

          echo "‚úÖ All OpenAPI specifications uploaded to release"

  # Additional job to validate the generated OpenAPI specs
  validate-openapi:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: generate-openapi
    if: always() && needs.generate-openapi.result == 'success'

    steps:
      - name: Download OpenAPI artifacts
        uses: actions/download-artifact@v4
        with:
          name: openapi-specifications

      - name: Install OpenAPI validation tools
        run: |
          echo "üì¶ Installing validation tools..."

          # Retry npm installs in case of network issues
          for attempt in 1 2 3; do
            echo "Attempt $attempt/3 for npm package installation..."

            if npm install -g @redocly/openapi-cli; then
              echo "‚úÖ Validation tools installed successfully"
              break
            else
              if [ $attempt -eq 3 ]; then
                echo "‚ùå Failed to install validation tools after 3 attempts"
                exit 1
              fi
              echo "‚ö†Ô∏è Installation failed, retrying in 5 seconds..."
              sleep 5
            fi
          done

      - name: Validate OpenAPI specifications
        run: |
          echo "üîç Validating OpenAPI specifications..."

          for spec_file in openapi-specs/*.json; do
            echo "Validating $spec_file..."

            # Basic JSON validation
            if ! jq empty "$spec_file" 2>/dev/null; then
              echo "‚ùå Invalid JSON format in $spec_file"
              exit 1
            fi

            # Validate with Redocly CLI
            echo "  üìã Redocly validation:"
            if npx @redocly/openapi-cli validate "$spec_file"; then
              echo "  ‚úÖ Redocly validation passed"
            else
              echo "  ‚ö†Ô∏è Redocly validation failed for $spec_file"
            fi

            echo "  ‚úÖ Validation completed for $spec_file"
            echo
          done

          echo "üéâ All OpenAPI specifications have been validated!"

      - name: Generate documentation preview
        run: |
          echo "üìö Generating documentation previews..."

          # Install redoc-cli for documentation generation with retry logic
          for attempt in 1 2 3; do
            echo "Installing redoc-cli (attempt $attempt/3)..."
            if npm install -g redoc-cli; then
              echo "‚úÖ redoc-cli installed successfully"
              break
            else
              if [ $attempt -eq 3 ]; then
                echo "‚ùå Failed to install redoc-cli after 3 attempts"
                exit 1
              fi
              echo "‚ö†Ô∏è Installation failed, retrying in 5 seconds..."
              sleep 5
            fi
          done

          mkdir -p docs-preview

          for spec_file in openapi-specs/*.json; do
            api_name=$(basename "$spec_file" .json)
            echo "üîÑ Generating docs for $api_name..."

            # Use redoc-cli despite deprecation warning since it works reliably
            if redoc-cli build "$spec_file" --output "docs-preview/${api_name}.html"; then
              echo "‚úÖ Documentation generated for $api_name"
            else
              echo "‚ùå Failed to generate documentation for $api_name"
              exit 1
            fi
          done

          echo "üìÅ Generated documentation files:"
          ls -la docs-preview/

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openapi-documentation
          path: docs-preview/
          retention-days: 30

  # Deploy PR documentation preview with GitHub Pages
  deploy-pr-preview:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: validate-openapi
    if: github.event_name == 'pull_request' && needs.validate-openapi.result == 'success'
    permissions:
      contents: read
      pull-requests: write
      deployments: write
      pages: write
      id-token: write

    # Use PR-specific concurrency to allow multiple PRs but prevent conflicts within same PR
    concurrency:
      group: "openapi-pr-${{ github.event.pull_request.number }}"
      cancel-in-progress: true

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download current GitHub Pages site (if exists)
        run: |
          echo "üì• Downloading current GitHub Pages site (if it exists)..."

          # Create directory for site
          mkdir -p site

          # Try to download the current site (will fail silently if not exists)
          gh_pages_url="${{ vars.GH_PAGES_URL || format('https://{0}.github.io/{1}', github.repository_owner, github.event.repository.name) }}"

          echo "Attempting to download from: $gh_pages_url"

          if curl -sSL --head "$gh_pages_url" | grep -q "HTTP/2 200"; then
            echo "GitHub Pages site exists, downloading..."
            curl -sSL "$gh_pages_url/index.html" -o site/index.html || echo "Failed to download index.html, will create new one"

            # If main docs exist, try to download them too
            if curl -sSL --head "$gh_pages_url/main/" | grep -q "HTTP/2 200"; then
              echo "Main docs exist, preserving them..."
              mkdir -p site/main
              curl -sSL "$gh_pages_url/main/index.html" -o site/main/index.html || true
              curl -sSL "$gh_pages_url/main/experience-api.html" -o site/main/experience-api.html || true
              curl -sSL "$gh_pages_url/main/status-api.html" -o site/main/status-api.html || true
              curl -sSL "$gh_pages_url/main/worker-dal-api.html" -o site/main/worker-dal-api.html || true
            fi

            # Discover and preserve existing PR preview directories
            echo "Discovering existing PR preview directories..."
            if [ -f "site/index.html" ]; then
              # Extract PR directory names from the index.html (look for pr-NUMBER patterns)
              pr_dirs=$(grep -o 'href="pr-[0-9]*/' site/index.html | sed 's/href="//g' | sed 's/\/$//g' | sort -u)

              for pr_dir in $pr_dirs; do
                pr_number=$(echo "$pr_dir" | sed 's/pr-//g')

                # Skip the current PR to avoid conflicts
                if [ "$pr_number" != "${{ github.event.pull_request.number }}" ]; then
                  echo "Preserving existing PR preview: $pr_dir"

                  if curl -sSL --head "$gh_pages_url/$pr_dir/" | grep -q "HTTP/2 200"; then
                    mkdir -p "site/$pr_dir"
                    curl -sSL "$gh_pages_url/$pr_dir/index.html" -o "site/$pr_dir/index.html" || true
                    curl -sSL "$gh_pages_url/$pr_dir/experience-api.html" -o "site/$pr_dir/experience-api.html" || true
                    curl -sSL "$gh_pages_url/$pr_dir/status-api.html" -o "site/$pr_dir/status-api.html" || true
                    curl -sSL "$gh_pages_url/$pr_dir/worker-dal-api.html" -o "site/$pr_dir/worker-dal-api.html" || true
                    echo "‚úÖ Preserved $pr_dir"
                  else
                    echo "‚ö†Ô∏è PR directory $pr_dir exists in index but not accessible, skipping"
                  fi
                else
                  echo "Skipping current PR directory: $pr_dir (will be recreated)"
                fi
              done
            else
              echo "No existing index.html found, will create new site structure"
            fi
          else
            echo "No existing GitHub Pages site found, creating new one"
          fi

      - name: Download OpenAPI documentation artifacts
        uses: actions/download-artifact@v4
        with:
          name: openapi-documentation
          path: docs-preview

      - name: Create PR preview directory structure
        run: |
          # Create PR-specific directory
          mkdir -p site/pr-${{ github.event.pull_request.number }}

          # Copy documentation to PR-specific directory
          cp -r docs-preview/* site/pr-${{ github.event.pull_request.number }}/

          echo "üìÅ Created PR preview at site/pr-${{ github.event.pull_request.number }}/"
          ls -la site/pr-${{ github.event.pull_request.number }}/

      - name: Create PR-specific index page
        run: |
          cat > site/pr-${{ github.event.pull_request.number }}/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>ManMan API Documentation - PR #${{ github.event.pull_request.number }}</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      max-width: 800px;
                      margin: 0 auto;
                      padding: 2rem;
                      background: #f8fafc;
                  }
                  .header {
                      text-align: center;
                      margin-bottom: 3rem;
                      padding-bottom: 2rem;
                      border-bottom: 2px solid #e2e8f0;
                  }
                  .pr-banner {
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white;
                      padding: 1rem;
                      border-radius: 8px;
                      margin-bottom: 2rem;
                      text-align: center;
                  }
                  .api-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                      gap: 2rem;
                      margin-top: 2rem;
                  }
                  .api-card {
                      background: white;
                      border-radius: 12px;
                      padding: 2rem;
                      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
                      border: 1px solid #e2e8f0;
                      transition: transform 0.2s, box-shadow 0.2s;
                  }
                  .api-card:hover {
                      transform: translateY(-2px);
                      box-shadow: 0 10px 25px -3px rgba(0, 0, 0, 0.1);
                  }
                  .api-title {
                      font-size: 1.5rem;
                      font-weight: 600;
                      margin-bottom: 1rem;
                      color: #1e293b;
                  }
                  .api-description {
                      color: #64748b;
                      margin-bottom: 1.5rem;
                      line-height: 1.6;
                  }
                  .api-link {
                      display: inline-block;
                      background: #3b82f6;
                      color: white;
                      padding: 0.75rem 1.5rem;
                      border-radius: 8px;
                      text-decoration: none;
                      font-weight: 500;
                      transition: background 0.2s;
                  }
                  .api-link:hover {
                      background: #2563eb;
                  }
                  .build-info {
                      background: #f1f5f9;
                      border-radius: 8px;
                      padding: 1rem;
                      margin-top: 2rem;
                      font-size: 0.875rem;
                      color: #475569;
                  }
                  .back-link {
                      display: inline-block;
                      margin-bottom: 1rem;
                      color: #6b7280;
                      text-decoration: none;
                  }
                  .back-link:hover {
                      color: #374151;
                  }
              </style>
          </head>
          <body>
              <a href="../" class="back-link">‚Üê Back to Documentation Hub</a>

              <div class="pr-banner">
                  <h2>üîç Pull Request Preview</h2>
                  <p>This is a preview of the API documentation for PR #${{ github.event.pull_request.number }}</p>
                  <p><strong>${{ github.event.pull_request.title }}</strong></p>
              </div>

              <div class="header">
                  <h1>ManMan API Documentation</h1>
                  <p>Interactive API documentation for all ManMan services</p>
              </div>

              <div class="api-grid">
                  <div class="api-card">
                      <h2 class="api-title">Experience API</h2>
                      <p class="api-description">Game server management and user-facing functionality. This is the primary API for hosting game servers and managing user experiences.</p>
                      <a href="experience-api.html" class="api-link">View Documentation</a>
                  </div>

                  <div class="api-card">
                      <h2 class="api-title">Status API</h2>
                      <p class="api-description">Status and monitoring functionality. Provides health checks, metrics, and monitoring endpoints for all ManMan services.</p>
                      <a href="status-api.html" class="api-link">View Documentation</a>
                  </div>

                  <div class="api-card">
                      <h2 class="api-title">Worker DAL API</h2>
                      <p class="api-description">Data access endpoints for worker services. Internal API used by worker processes for database operations.</p>
                      <a href="worker-dal-api.html" class="api-link">View Documentation</a>
                  </div>
              </div>

              <div class="build-info">
                  <strong>PR Information:</strong><br>
                  PR: <code>#${{ github.event.pull_request.number }}</code><br>
                  Title: <code>${{ github.event.pull_request.title }}</code><br>
                  Branch: <code>${{ github.head_ref }}</code><br>
                  Commit: <code>${{ github.sha }}</code><br>
                  Generated at: <code>$(date -u)</code>
              </div>
          </body>
          </html>
          EOF

      - name: Update main index with PR links
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            console.log('üîç Discovering existing PR preview directories...');

            // Scan the site directory for PR preview folders
            const siteDirs = fs.readdirSync('site');
            const prDirs = siteDirs.filter(dir => dir.startsWith('pr-'));

            console.log(`Found ${prDirs.length} PR preview directories: ${prDirs.join(', ')}`);

            // Always include the current PR
            const currentPR = ${{ github.event.pull_request.number }};
            const currentPRDir = `pr-${currentPR}`;
            if (!prDirs.includes(currentPRDir)) {
              prDirs.push(currentPRDir);
            }

            // Sort PR directories by number (newest first)
            prDirs.sort((a, b) => {
              const numA = parseInt(a.replace('pr-', ''));
              const numB = parseInt(b.replace('pr-', ''));
              return numB - numA;
            });

            console.log(`Including PR directories: ${prDirs.join(', ')}`);

            // Generate PR preview cards HTML
            let prCardsHtml = '';
            for (const prDir of prDirs) {
              const prNumber = prDir.replace('pr-', '');

              let prTitle = 'Loading...';
              let prUrl = `${prDir}/`;

              if (prNumber == currentPR) {
                prTitle = `${{ github.event.pull_request.title }}`;
              }

              prCardsHtml += `
                  <div class="preview-card pr-preview">
                      <h2 class="preview-title">üîç PR #${prNumber} Preview</h2>
                      <p><strong>${prTitle}</strong></p>
                      <p>Preview of API changes in pull request #${prNumber}</p>
                      <a href="${prUrl}" class="preview-link">View PR Preview</a>
                  </div>`;
            }

            // Generate the complete index.html
            const indexHtml = `<!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>ManMan API Documentation Hub</title>
                <style>
                    body {
                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                        max-width: 900px;
                        margin: 0 auto;
                        padding: 2rem;
                        background: #f8fafc;
                    }
                    .header {
                        text-align: center;
                        margin-bottom: 3rem;
                        padding-bottom: 2rem;
                        border-bottom: 2px solid #e2e8f0;
                    }
                    .section {
                        margin-bottom: 3rem;
                    }
                    .section-title {
                        font-size: 1.5rem;
                        font-weight: 600;
                        margin-bottom: 1rem;
                        color: #1e293b;
                    }
                    .preview-grid {
                        display: grid;
                        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
                        gap: 2rem;
                        margin-top: 2rem;
                    }
                    .preview-card {
                        background: white;
                        border-radius: 12px;
                        padding: 2rem;
                        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
                        border: 1px solid #e2e8f0;
                    }
                    .main-docs {
                        border-left: 4px solid #10b981;
                    }
                    .pr-preview {
                        border-left: 4px solid #f59e0b;
                    }
                    .preview-title {
                        font-size: 1.25rem;
                        font-weight: 600;
                        margin-bottom: 1rem;
                        color: #1e293b;
                    }
                    .preview-link {
                        display: inline-block;
                        background: #3b82f6;
                        color: white;
                        padding: 0.5rem 1rem;
                        border-radius: 6px;
                        text-decoration: none;
                        font-weight: 500;
                        margin-top: 1rem;
                    }
                    .main-docs .preview-link {
                        background: #10b981;
                    }
                    .pr-preview .preview-link {
                        background: #f59e0b;
                    }
                    .empty-state {
                        text-align: center;
                        color: #64748b;
                        font-style: italic;
                    }
                </style>
            </head>
            <body>
                <div class="header">
                    <h1>ManMan API Documentation Hub</h1>
                    <p>Access the latest API documentation and PR previews</p>
                </div>

                <div class="section">
                    <h2 class="section-title">üöÄ Latest Release Documentation</h2>
                    <div class="preview-grid">
                        <div class="preview-card main-docs">
                            <h2 class="preview-title">Latest Release Documentation</h2>
                            <p>Official API documentation from the latest stable release</p>
                            <a href="main/" class="preview-link">View Main Documentation</a>
                        </div>
                    </div>
                </div>

                <div class="section">
                    <h2 class="section-title">üîç PR Previews (${prDirs.length})</h2>
                    <div class="preview-grid">
                        ${prCardsHtml || '<div class="empty-state">No PR previews available</div>'}
                    </div>
                </div>

                <div style="margin-top: 3rem; padding: 1rem; background: #f1f5f9; border-radius: 8px; font-size: 0.875rem; color: #475569;">
                    <strong>Last updated:</strong> ${new Date().toISOString()}<br>
                    <strong>Generated by:</strong> OpenAPI Documentation Workflow
                </div>
            </body>
            </html>`;

            // Write the index.html file
            fs.writeFileSync('site/index.html', indexHtml);
            console.log('‚úÖ Generated dynamic index.html with all PR previews');

      - name: Upload artifact for backup
        uses: actions/upload-artifact@v4
        with:
          name: pr-${{ github.event.pull_request.number }}-preview-site
          path: site/
          retention-days: 30

      - name: Setup Pages for deployment
        uses: actions/configure-pages@v4

      - name: Upload site to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Comment on PR with preview link
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request.number;
            const pageUrl = '${{ steps.deployment.outputs.page_url }}';
            const prPreviewUrl = `${pageUrl}pr-${pull_number}/`;

            const body = `## üìö API Documentation Preview

            The OpenAPI documentation preview has been deployed for this PR.

            **üîç PR Documentation:** [View Documentation](${prPreviewUrl})

            ### Available APIs in this preview:
            - [Experience API](${prPreviewUrl}experience-api.html) - Game server management and user-facing functionality
            - [Status API](${prPreviewUrl}status-api.html) - Status and monitoring functionality
            - [Worker DAL API](${prPreviewUrl}worker-dal-api.html) - Data access endpoints for worker services

            **Environment:** \`github-pages\`

            *This preview is automatically updated with each commit to this PR and will be available as long as the PR is open.*

            <!-- openapi-preview-comment:${pull_number} -->`;

            try {
              // Find existing comment using a more robust method
              const comments = await github.rest.issues.listComments({
                owner,
                repo,
                issue_number: pull_number,
              });

              // Look for comment with our unique marker
              const existingComment = comments.data.find(comment =>
                comment.body && comment.body.includes(`<!-- openapi-preview-comment:${pull_number} -->`)
              );

              if (existingComment) {
                console.log(`Updating existing comment ${existingComment.id}`);
                await github.rest.issues.updateComment({
                  owner,
                  repo,
                  comment_id: existingComment.id,
                  body,
                });
                console.log('Comment updated successfully');
              } else {
                console.log('Creating new comment');
                const newComment = await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: pull_number,
                  body,
                });
                console.log(`New comment created with ID: ${newComment.data.id}`);
              }
            } catch (error) {
              console.error('Error managing PR comment:', error);
              // Don't fail the workflow if comment fails
              core.warning(`Failed to update PR comment: ${error.message}`);
            }

  # Deploy main documentation (only for main branch pushes and releases)
  deploy-main-docs:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: validate-openapi
    if: (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) && needs.validate-openapi.result == 'success'
    permissions:
      contents: read
      pages: write
      id-token: write

    # Use different concurrency groups for main branch vs tag deployments to prevent conflicts
    concurrency:
      group: ${{ format('openapi-{0}-deployment', startsWith(github.ref, 'refs/tags/v') && 'tag' || 'main') }}
      cancel-in-progress: true

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download OpenAPI documentation artifacts
        uses: actions/download-artifact@v4
        with:
          name: openapi-documentation
          path: docs-preview

      - name: Setup site structure and clean up closed PR previews
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const { execSync } = require('child_process');

            // Create basic site structure
            fs.mkdirSync('site/main', { recursive: true });
            execSync('cp -r docs-preview/* site/main/');

            // If this is a tag, also create a versioned copy
            if (context.ref.startsWith('refs/tags/v')) {
              const version = context.ref.replace('refs/tags/', '');
              fs.mkdirSync(`site/versions/${version}`, { recursive: true });
              execSync(`cp -r docs-preview/* site/versions/${version}/`);
            }

            // ISSUE #73: Clean up closed PR previews when deploying from main branch
            // This ensures that PR previews are removed not only when PRs are closed
            // but also during subsequent deployments from main
            try {
              // List all directories in the site folder
              const siteDirs = fs.readdirSync('site');

              // Find PR preview directories (format: pr-NUMBER)
              const prDirs = siteDirs.filter(dir => dir.startsWith('pr-'));

              if (prDirs.length > 0) {
                console.log(`Found ${prDirs.length} PR preview directories to check`);

                for (const prDir of prDirs) {
                  // Extract PR number from directory name (pr-123 -> 123)
                  const prNumber = parseInt(prDir.replace('pr-', ''), 10);

                  if (isNaN(prNumber)) {
                    console.log(`Invalid PR directory format: ${prDir}, skipping`);
                    continue;
                  }

                  console.log(`Checking status of PR #${prNumber}`);

                  try {
                    // Check if PR is still open using GitHub API
                    const { data: pr } = await github.rest.pulls.get({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      pull_number: prNumber
                    });

                    if (pr.state === 'open') {
                      console.log(`PR #${prNumber} is still open, keeping preview directory`);
                    } else {
                      console.log(`PR #${prNumber} is ${pr.state}, removing preview directory`);
                      // Remove the PR preview directory
                      execSync(`rm -rf site/${prDir}`);
                      console.log(`Removed ${prDir} directory`);
                    }
                  } catch (error) {
                    // PR might not exist anymore
                    if (error.status === 404) {
                      console.log(`PR #${prNumber} not found, removing preview directory`);
                      execSync(`rm -rf site/${prDir}`);
                      console.log(`Removed ${prDir} directory`);
                    } else {
                      console.log(`Error checking PR #${prNumber}: ${error.message}`);
                    }
                  }
                }
              } else {
                console.log('No PR preview directories found to clean up');
              }
            } catch (error) {
              console.log(`Error during PR preview cleanup: ${error.message}`);
              // Don't fail the workflow if cleanup encounters an issue
            }

      - name: Create main documentation index
        run: |
          cat > site/main/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>ManMan API Documentation</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      max-width: 800px;
                      margin: 0 auto;
                      padding: 2rem;
                      background: #f8fafc;
                  }
                  .header {
                      text-align: center;
                      margin-bottom: 3rem;
                      padding-bottom: 2rem;
                      border-bottom: 2px solid #e2e8f0;
                  }
                  .version-banner {
                      background: linear-gradient(135deg, #10b981 0%, #059669 100%);
                      color: white;
                      padding: 1rem;
                      border-radius: 8px;
                      margin-bottom: 2rem;
                      text-align: center;
                  }
                  .api-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                      gap: 2rem;
                      margin-top: 2rem;
                  }
                  .api-card {
                      background: white;
                      border-radius: 12px;
                      padding: 2rem;
                      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
                      border: 1px solid #e2e8f0;
                      transition: transform 0.2s, box-shadow 0.2s;
                  }
                  .api-card:hover {
                      transform: translateY(-2px);
                      box-shadow: 0 10px 25px -3px rgba(0, 0, 0, 0.1);
                  }
                  .api-title {
                      font-size: 1.5rem;
                      font-weight: 600;
                      margin-bottom: 1rem;
                      color: #1e293b;
                  }
                  .api-description {
                      color: #64748b;
                      margin-bottom: 1.5rem;
                      line-height: 1.6;
                  }
                  .api-link {
                      display: inline-block;
                      background: #3b82f6;
                      color: white;
                      padding: 0.75rem 1.5rem;
                      border-radius: 8px;
                      text-decoration: none;
                      font-weight: 500;
                      transition: background 0.2s;
                  }
                  .api-link:hover {
                      background: #2563eb;
                  }
                  .build-info {
                      background: #f1f5f9;
                      border-radius: 8px;
                      padding: 1rem;
                      margin-top: 2rem;
                      font-size: 0.875rem;
                      color: #475569;
                  }
                  .back-link {
                      display: inline-block;
                      margin-bottom: 1rem;
                      color: #6b7280;
                      text-decoration: none;
                  }
                  .back-link:hover {
                      color: #374151;
                  }
              </style>
          </head>
          <body>
              <a href="../" class="back-link">‚Üê Back to Documentation Hub</a>

              <div class="version-banner">
                  <h2>üöÄ Official Documentation</h2>
                  <p>Latest stable API documentation</p>
                  ${{ startsWith(github.ref, 'refs/tags/v') && format('<p><strong>Version: {0}</strong></p>', github.ref_name) || '' }}
              </div>

              <div class="header">
                  <h1>ManMan API Documentation</h1>
                  <p>Interactive API documentation for all ManMan services</p>
              </div>

              <div class="api-grid">
                  <div class="api-card">
                      <h2 class="api-title">Experience API</h2>
                      <p class="api-description">Game server management and user-facing functionality. This is the primary API for hosting game servers and managing user experiences.</p>
                      <a href="experience-api.html" class="api-link">View Documentation</a>
                  </div>

                  <div class="api-card">
                      <h2 class="api-title">Status API</h2>
                      <p class="api-description">Status and monitoring functionality. Provides health checks, metrics, and monitoring endpoints for all ManMan services.</p>
                      <a href="status-api.html" class="api-link">View Documentation</a>
                  </div>

                  <div class="api-card">
                      <h2 class="api-title">Worker DAL API</h2>
                      <p class="api-description">Data access endpoints for worker services. Internal API used by worker processes for database operations.</p>
                      <a href="worker-dal-api.html" class="api-link">View Documentation</a>
                  </div>
              </div>

              <div class="build-info">
                  <strong>Build Information:</strong><br>
                  Generated from commit: <code>${{ github.sha }}</code><br>
                  ${{ startsWith(github.ref, 'refs/tags/v') && format('Version: <code>{0}</code><br>', github.ref_name) || format('Branch: <code>{0}</code><br>', github.ref_name) }}
                  Event: <code>${{ github.event_name }}</code><br>
                  Generated at: <code>$(date -u)</code>
              </div>
          </body>
          </html>
          EOF

      - name: Create comprehensive hub index
        run: |
          cat > site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>ManMan API Documentation Hub</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      max-width: 1000px;
                      margin: 0 auto;
                      padding: 2rem;
                      background: #f8fafc;
                  }
                  .header {
                      text-align: center;
                      margin-bottom: 3rem;
                      padding-bottom: 2rem;
                      border-bottom: 2px solid #e2e8f0;
                  }
                  .section {
                      margin-bottom: 3rem;
                  }
                  .section-title {
                      font-size: 1.5rem;
                      font-weight: 600;
                      margin-bottom: 1rem;
                      color: #1e293b;
                  }
                  .card-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
                      gap: 1.5rem;
                  }
                  .card {
                      background: white;
                      border-radius: 12px;
                      padding: 2rem;
                      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
                      border: 1px solid #e2e8f0;
                  }
                  .main-docs {
                      border-left: 4px solid #10b981;
                  }
                  .pr-preview {
                      border-left: 4px solid #f59e0b;
                  }
                  .version-docs {
                      border-left: 4px solid #6366f1;
                  }
                  .card-title {
                      font-size: 1.25rem;
                      font-weight: 600;
                      margin-bottom: 1rem;
                      color: #1e293b;
                  }
                  .card-description {
                      color: #64748b;
                      margin-bottom: 1.5rem;
                      line-height: 1.6;
                  }
                  .card-link {
                      display: inline-block;
                      background: #3b82f6;
                      color: white;
                      padding: 0.5rem 1rem;
                      border-radius: 6px;
                      text-decoration: none;
                      font-weight: 500;
                  }
                  .main-docs .card-link {
                      background: #10b981;
                  }
                  .pr-preview .card-link {
                      background: #f59e0b;
                  }
                  .version-docs .card-link {
                      background: #6366f1;
                  }
                  .info-section {
                      background: #f8fafc;
                      border-radius: 8px;
                      padding: 1.5rem;
                      margin-top: 2rem;
                      border: 1px solid #e2e8f0;
                  }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>ManMan API Documentation Hub</h1>
                  <p>Access API documentation for all versions and PR previews</p>
              </div>

              <div class="section">
                  <h2 class="section-title">üöÄ Current Documentation</h2>
                  <div class="card-grid">
                      <div class="card main-docs">
                          <h3 class="card-title">Latest Release Documentation</h3>
                          <p class="card-description">Official API documentation from the latest stable release</p>
                          <a href="main/" class="card-link">View Documentation</a>
                      </div>
                  </div>
              </div>

              <div class="section">
                  <h2 class="section-title">üîç PR Previews</h2>
                  <div class="card-grid" id="pr-previews">
                      <div class="card">
                          <p class="card-description">PR previews will appear here when pull requests are opened</p>
                      </div>
                  </div>
              </div>

              <div class="section">
                  <h2 class="section-title">üìö Version History</h2>
                  <div class="card-grid" id="version-history">
                      <div class="card">
                          <p class="card-description">Historical versions will appear here as releases are published</p>
                      </div>
                  </div>
              </div>

              <div class="info-section">
                  <h3>About This Documentation</h3>
                  <p>This hub provides access to ManMan API documentation across different versions and development stages:</p>
                  <ul>
                      <li><strong>Latest Release:</strong> Stable documentation from the main branch</li>
                      <li><strong>PR Previews:</strong> Live previews of API changes in active pull requests</li>
                      <li><strong>Version History:</strong> Documentation for all released versions</li>
                  </ul>
                  <p><strong>Last updated:</strong> <code>$(date -u)</code></p>
              </div>

              <script>
                  // This would be enhanced with actual PR and version discovery
                  // For now, it's a static template that will be enhanced by the workflow
              </script>
          </body>
          </html>
          EOF

      - name: Create site archive
        run: |
          cd site
          tar -czf ../site.tar.gz .
          cd ..

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Log main deployment results
        run: |
          echo "üöÄ Main documentation deployment completed!"
          echo "Deployment URL: ${{ steps.deployment.outputs.page_url }}"
          echo "Main docs URL: ${{ steps.deployment.outputs.page_url }}main/"
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"

  # Cleanup PR previews when PR is closed
  cleanup-pr-preview:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    permissions:
      deployments: write
      pull-requests: write
      contents: read
      pages: write
      id-token: write

    concurrency:
      group: "openapi-pr-cleanup-${{ github.event.pull_request.number }}"
      cancel-in-progress: true

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ISSUE #73: Download and preserve the current GitHub Pages site
      # so we can remove just the closed PR's preview while keeping all other content
      - name: Download current GitHub Pages site (if exists)
        run: |
          echo "üì• Downloading current GitHub Pages site (if it exists)..."

          # Create directory for site
          mkdir -p site

          # Try to download the current site (will fail silently if not exists)
          gh_pages_url="${{ vars.GH_PAGES_URL || format('https://{0}.github.io/{1}', github.repository_owner, github.event.repository.name) }}"

          echo "Attempting to download from: $gh_pages_url"

          if curl -sSL --head "$gh_pages_url" | grep -q "HTTP/2 200"; then
            echo "GitHub Pages site exists, downloading..."
            curl -sSL "$gh_pages_url/index.html" -o site/index.html || echo "Failed to download index.html, will create new one"

            # If main docs exist, preserve them
            if curl -sSL --head "$gh_pages_url/main/" | grep -q "HTTP/2 200"; then
              echo "Main docs exist, preserving them..."
              mkdir -p site/main
              curl -sSL "$gh_pages_url/main/index.html" -o site/main/index.html || true
              curl -sSL "$gh_pages_url/main/experience-api.html" -o site/main/experience-api.html || true
              curl -sSL "$gh_pages_url/main/status-api.html" -o site/main/status-api.html || true
              curl -sSL "$gh_pages_url/main/worker-dal-api.html" -o site/main/worker-dal-api.html || true
            fi

            # If version docs exist, preserve them
            if curl -sSL --head "$gh_pages_url/versions/" | grep -q "HTTP/2 200"; then
              echo "Version docs exist, preserving them..."
              mkdir -p site/versions
              # This is a simplification - in real implementation you might want to download all version folders
              curl -sSL "$gh_pages_url/versions/index.html" -o site/versions/index.html || true
            fi

            # Find and preserve other PR preview directories except the current one
            current_pr="${{ github.event.pull_request.number }}"

            # List directories from GitHub Pages root
            echo "Looking for other PR directories to preserve..."
            for dir in $(curl -sSL "$gh_pages_url" | grep -o 'href="pr-[0-9]*/' | sed 's/href="//g' | sed 's/\/$//g'); do
              pr_num=$(echo "$dir" | sed 's/pr-//g')

              if [ "$pr_num" != "$current_pr" ]; then
                echo "Found other PR preview: $dir, preserving it"
                mkdir -p "site/$dir"
                curl -sSL "$gh_pages_url/$dir/index.html" -o "site/$dir/index.html" || true
                curl -sSL "$gh_pages_url/$dir/experience-api.html" -o "site/$dir/experience-api.html" || true
                curl -sSL "$gh_pages_url/$dir/status-api.html" -o "site/$dir/status-api.html" || true
                curl -sSL "$gh_pages_url/$dir/worker-dal-api.html" -o "site/$dir/worker-dal-api.html" || true
              else
                echo "Skipping current PR directory: $dir (will be removed)"
              fi
            done
          else
            echo "No existing GitHub Pages site found, creating new one"
          fi

      # ISSUE #73: Remove the closed PR's preview directory from GitHub Pages
      - name: Remove PR preview directory
        run: |
          echo "üóëÔ∏è Removing PR preview directory for PR #${{ github.event.pull_request.number }}"
          rm -rf "site/pr-${{ github.event.pull_request.number }}"

      # ISSUE #73: Update the index page to remove references to the closed PR
      - name: Update main index to remove closed PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            console.log('üîç Regenerating index after PR cleanup...');

            // Scan the site directory for remaining PR preview folders
            let siteDirs = [];
            if (fs.existsSync('site')) {
              siteDirs = fs.readdirSync('site');
            }
            const prDirs = siteDirs.filter(dir => dir.startsWith('pr-'));

            console.log(`Found ${prDirs.length} remaining PR preview directories: ${prDirs.join(', ')}`);

            // Sort PR directories by number (newest first)
            prDirs.sort((a, b) => {
              const numA = parseInt(a.replace('pr-', ''));
              const numB = parseInt(b.replace('pr-', ''));
              return numB - numA;
            });

            // Generate PR preview cards HTML
            let prCardsHtml = '';
            if (prDirs.length > 0) {
              for (const prDir of prDirs) {
                const prNumber = prDir.replace('pr-', '');

                prCardsHtml += `
                    <div class="preview-card pr-preview">
                        <h2 class="preview-title">üîç PR #${prNumber} Preview</h2>
                        <p><strong>Loading...</strong></p>
                        <p>Preview of API changes in pull request #${prNumber}</p>
                        <a href="${prDir}/" class="preview-link">View PR Preview</a>
                    </div>`;
              }
            } else {
              prCardsHtml = '<div class="empty-state">No active PR previews</div>';
            }

            // Generate the complete index.html
            const indexHtml = `<!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>ManMan API Documentation Hub</title>
                <style>
                    body {
                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                        max-width: 900px;
                        margin: 0 auto;
                        padding: 2rem;
                        background: #f8fafc;
                    }
                    .header {
                        text-align: center;
                        margin-bottom: 3rem;
                        padding-bottom: 2rem;
                        border-bottom: 2px solid #e2e8f0;
                    }
                    .section {
                        margin-bottom: 3rem;
                    }
                    .section-title {
                        font-size: 1.5rem;
                        font-weight: 600;
                        margin-bottom: 1rem;
                        color: #1e293b;
                    }
                    .preview-grid {
                        display: grid;
                        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
                        gap: 2rem;
                        margin-top: 2rem;
                    }
                    .preview-card {
                        background: white;
                        border-radius: 12px;
                        padding: 2rem;
                        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
                        border: 1px solid #e2e8f0;
                    }
                    .main-docs {
                        border-left: 4px solid #10b981;
                    }
                    .pr-preview {
                        border-left: 4px solid #f59e0b;
                    }
                    .preview-title {
                        font-size: 1.25rem;
                        font-weight: 600;
                        margin-bottom: 1rem;
                        color: #1e293b;
                    }
                    .preview-link {
                        display: inline-block;
                        background: #3b82f6;
                        color: white;
                        padding: 0.5rem 1rem;
                        border-radius: 6px;
                        text-decoration: none;
                        font-weight: 500;
                        margin-top: 1rem;
                    }
                    .main-docs .preview-link {
                        background: #10b981;
                    }
                    .pr-preview .preview-link {
                        background: #f59e0b;
                    }
                    .empty-state {
                        text-align: center;
                        color: #64748b;
                        font-style: italic;
                    }
                </style>
            </head>
            <body>
                <div class="header">
                    <h1>ManMan API Documentation Hub</h1>
                    <p>Access the latest API documentation and PR previews</p>
                </div>

                <div class="section">
                    <h2 class="section-title">üöÄ Latest Release Documentation</h2>
                    <div class="preview-grid">
                        <div class="preview-card main-docs">
                            <h2 class="preview-title">Latest Release Documentation</h2>
                            <p>Official API documentation from the latest stable release</p>
                            <a href="main/" class="preview-link">View Main Documentation</a>
                        </div>
                    </div>
                </div>

                <div class="section">
                    <h2 class="section-title">üîç PR Previews (${prDirs.length})</h2>
                    <div class="preview-grid">
                        ${prCardsHtml}
                    </div>
                </div>

                <div style="margin-top: 3rem; padding: 1rem; background: #f1f5f9; border-radius: 8px; font-size: 0.875rem; color: #475569;">
                    <strong>Last updated:</strong> ${new Date().toISOString()}<br>
                    <strong>Generated by:</strong> OpenAPI Documentation Workflow (cleanup)
                </div>
            </body>
            </html>`;

            // Write the index.html file
            fs.writeFileSync('site/index.html', indexHtml);
            console.log(`‚úÖ Regenerated index.html after cleanup, showing ${prDirs.length} remaining PR previews`);

      - name: Upload site to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Cleanup deployment environment
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request.number;

            try {
              // List all deployments for the PR environment
              const deployments = await github.rest.repos.listDeployments({
                owner,
                repo,
                environment: `pr-preview-${pull_number}`
              });

              // Mark all deployments as inactive
              for (const deployment of deployments.data) {
                await github.rest.repos.createDeploymentStatus({
                  owner,
                  repo,
                  deployment_id: deployment.id,
                  state: 'inactive',
                  description: 'PR closed - preview cleaned up'
                });
              }

              console.log(`Cleaned up ${deployments.data.length} deployment(s) for pr-preview-${pull_number}`);
            } catch (error) {
              console.log(`Cleanup completed for pr-preview-${pull_number}`);
              // Don't fail if there's nothing to clean up
            }

      - name: Log cleanup action
        run: |
          echo "üßπ PR #${{ github.event.pull_request.number }} closed - preview cleaned up"
          echo "Removed from GitHub Pages: pr-${{ github.event.pull_request.number }} directory"
